#include "esp_camera.h"
#include <WiFi.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>

#define CAMERA_MODEL_AI_THINKER  // Has PSRAM
#include "camera_pins.h"
#define FLASH_LED_PIN 4
bool flashState = LOW;

// WiFi məlumatları
const char *ssid = "Kainat";
const char *password = "1N2S3A4N";

// Telegram bot tokeni və chat ID-si
const char *telegram_token = "7553115092:AAGz1uN6P1XufMlC8RamkD4jm5NgKmVVvcY";
const String CHAT_ID = "5420622167";

#define FLASH_LED_PIN 4
// WiFi və Telegram müştəriləri
WiFiClientSecure client;
UniversalTelegramBot bot(telegram_token, client);

void startCameraServer();
void setupLedFlash(int pin);
void sendIPToTelegram();
void handleNewMessages(int numNewMessages);
bool checkTelegramConnection();  // Telegram bağlantısını yoxlama funksiyası

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
  pinMode(FLASH_LED_PIN, OUTPUT);
  digitalWrite(FLASH_LED_PIN, flashState);

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_UXGA;
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 1;

  if (psramFound()) {
    config.jpeg_quality = 10;
    config.fb_count = 2;
    config.grab_mode = CAMERA_GRAB_LATEST;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.fb_location = CAMERA_FB_IN_DRAM;
  }

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Kamera başlatma səhvi: 0x%x", err);
    return;
  }

  sensor_t *s = esp_camera_sensor_get();
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);
    s->set_brightness(s, 1);
    s->set_saturation(s, -2);
  }
  s->set_framesize(s, FRAMESIZE_QVGA);

  WiFi.begin(ssid, password);
  WiFi.setSleep(false);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi bağlantısı tamamlandı!");

  // SSL sertifikatı yoxlamadan bağlantı qur
  client.setInsecure();

  // Telegrama bağlantını yoxla
  if (checkTelegramConnection()) {
    Serial.println("Telegram botuna uğurla qoşuldu!");
  } else {
    Serial.println("Telegram botuna qoşulmaq alınmadı!");
  }

  startCameraServer();
  sendIPToTelegram();

  Serial.print("Kamera hazır! 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' bu linkdən qoşula bilərsiniz.");
}

void handleNewMessages(int numNewMessages) {
  Serial.print("Yeni mesajlar: ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID) {
      bot.sendMessage(chat_id, "İcazəsiz istifadəçi", "");
      continue;
    }

    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;
    if (text == "/start") {
      String welcome = "Salam " + from_name + "!\n";
      welcome += "ESP32-CAM ilə işləmək üçün komandalar:\n";
      welcome += "/ip : IP adresini göstərir\n";
      welcome += "/flash : LED işığı yandırıb/söndürür\n";
      bot.sendMessage(CHAT_ID, welcome, "");
    }
    if (text == "/flash") {
      flashState = !flashState;
      digitalWrite(FLASH_LED_PIN, flashState ? HIGH : LOW);
      bot.sendMessage(CHAT_ID, flashState ? "Flash LED Yandı" : "Flash LED Söndü", "");
    }
    if (text == "/ip") {
      String ipAddress = WiFi.localIP().toString();
      bot.sendMessage(CHAT_ID, "ESP32 IP adresi: http://" + ipAddress, "");
    }
  }
}

void loop() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  while (numNewMessages) {
    handleNewMessages(numNewMessages);
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  }
  delay(1000);
}

// Telegram bağlantısını yoxlayan funksionallıq
bool checkTelegramConnection() {
  if (client.connect("api.telegram.org", 443)) {
    return bot.sendMessage(CHAT_ID, "Bot bağlantısı uğurla yaradıldı", "");
  }
  return false;
}

void sendIPToTelegram() {
  if (WiFi.status() == WL_CONNECTED) {
    String ipAddress = WiFi.localIP().toString();
    String message = "ESP32 Kamera IP: http://" + ipAddress;
    bot.sendMessage(CHAT_ID, message, "");
  }
}
